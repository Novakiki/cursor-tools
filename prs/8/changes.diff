diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1d95493..7bcdc51 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -10,6 +10,13 @@ All notable changes to this project will be documented in this file.
 - Browser commands (`open`, `act`, `observe`, `extract`) now have `--console` and `--network` options enabled by default. Use `--no-console` and `--no-network` to disable them. 
 - Improved page reuse in browser commands when using `--connect-to`: now reuses existing tabs instead of creating new ones for better state preservation
 
+### Added
+- Support for new Cursor IDE project rules structure
+  - New installations now use `.cursor/rules/cursor-tools.mdc`
+  - Maintain compatibility with legacy `.cursorrules` file
+  - When both exist, prefer new path and show warning
+  - Updated documentation to reflect new path structure
+
 ## [0.4.3-alpha.23] - 2024-03-22
 
 ### Fixed
diff --git a/README.md b/README.md
index c1508b1..46945c3 100644
--- a/README.md
+++ b/README.md
@@ -75,7 +75,7 @@ Here are two examples:
 
 ## What is cursor-tools
 
-`cursor-tools` provides a CLI that your **AI agent can use** to expand its capabilities. `cursor-tools` works with with Cursor (and is compatible with other agents), When you run `cursor-tools install` we automatically add a prompt section to your `.cursorrules` file so that it works out of the box with Cursor, there's not need for additional prompts.
+`cursor-tools` provides a CLI that your **AI agent can use** to expand its capabilities. `cursor-tools` works with with Cursor (and is compatible with other agents), When you run `cursor-tools install` we automatically add a prompt section to your Cursor project rules (`.cursor/rules/cursor-tools.mdc` or legacy `.cursorrules` file) so that it works out of the box with Cursor, there's no need for additional prompts.
 
 `cursor-tools` requires a Perplexity API key and a Google AI API key.
 
@@ -92,7 +92,7 @@ This command will:
 
 1. Add `cursor-tools` as a dev dependency in your package.json
 2. Guide you through API key configuration
-3. Update your `.cursorrules` file for Cursor integration
+3. Update your Cursor project rules for Cursor integration (using `.cursor/rules/cursor-tools.mdc` or existing `.cursorrules`)
 
 ## Requirements
 
@@ -441,11 +441,13 @@ Support to customize the input files to include is coming soon - open an issue i
 
 
 ### Cursor Configuration
-`cursor-tools` automatically configures Cursor by updating your `.cursorrules` file during installation. This provides:
+`cursor-tools` automatically configures Cursor by updating your project rules during installation. This provides:
 - Command suggestions
 - Usage examples
 - Context-aware assistance
 
+For new installations, we use the recommended `.cursor/rules/cursor-tools.mdc` path. For existing installations, we maintain compatibility with the legacy `.cursorrules` file. If both files exist, we prefer the new path and show a warning.
+
 #### Cursor Agent Configuration:
 
 To get the benefits of cursor-tools you should use Cursor agent in "yolo mode". Ideal settings:
diff --git a/local-docs/cursor-tools-remote.md b/local-docs/cursor-tools-remote.md
index 8c38c62..8025184 100644
--- a/local-docs/cursor-tools-remote.md
+++ b/local-docs/cursor-tools-remote.md
@@ -109,7 +109,9 @@ cursor-tools doc "Generate documentation" --output=docs/README.md
 
 ## Cursor Integration
 
-`cursor-tools` sets up Cursor by changing `.cursorrules` on installation. This provides command suggestions and context-aware help.
+`cursor-tools` sets up Cursor by updating your project rules during installation. For new installations, we use the recommended `.cursor/rules/cursor-tools.mdc` path. For existing installations, we maintain compatibility with the legacy `.cursorrules` file. If both files exist, we prefer the new path and show a warning.
+
+The project rules provide command suggestions and context-aware help for the Cursor Composer.
 
 Use Cursor agent in "yolo mode."
 
diff --git a/local-docs/cursor-tools.md b/local-docs/cursor-tools.md
index 8c4776e..870260c 100644
--- a/local-docs/cursor-tools.md
+++ b/local-docs/cursor-tools.md
@@ -265,15 +265,15 @@ If no authentication is available, the command will use unauthenticated access,
 -   **`repomix`:** Used by the `repo` and `doc` commands to pack the repository context.
 -   Node.js built-in modules: `fs`, `path`, `os`, `child_process`, `url`.
 
-## .cursorrules File
+## Cursor Integration
 
-The `.cursorrules` file is updated by the `install` command to provide instructions to the Cursor AI.  It includes:
-
--   A list of available `cursor-tools` commands.
--   Explanations of when to use each command.
--   Instructions on how to run the commands (both installed and in development).
--   Notes about configuration and API keys.
--   A version number (`cursor-tools-version`) to track updates.  The `checkCursorRules` function in `src/cursorrules.ts` checks this version and warns the user if an update is needed.
+`cursor-tools` sets up Cursor by updating your project rules during installation. For new installations, we use the recommended `.cursor/rules/cursor-tools.mdc` path. For existing installations, we maintain compatibility with the legacy `.cursorrules` file. If both files exist, we prefer the new path and show a warning.
 
+The project rules provide:
+- A list of available `cursor-tools` commands
+- Explanations of when to use each command
+- Instructions on how to run the commands (both installed and in development)
+- Notes about configuration and API keys
+- A version number (`cursor-tools-version`) to track updates. The `checkCursorRules` function in `src/cursorrules.ts` checks this version and warns the user if an update is needed.
 
 --- End of Documentation ---
diff --git a/src/commands/browser/open.ts b/src/commands/browser/open.ts
index f43fd57..0c5dc8c 100644
--- a/src/commands/browser/open.ts
+++ b/src/commands/browser/open.ts
@@ -134,7 +134,7 @@ export class OpenCommand implements Command {
           if (pages.length > 0) {
             // When connecting to existing Chrome, prefer reusing an existing page
             // Find the first page that isn't a new tab page
-            page = pages.find((p) => !p.url().startsWith('chrome://')) || pages[pages.length - 1];
+            page = pages.find(p => !p.url().startsWith('chrome://')) || pages[pages.length - 1];
             yield 'Using existing page...';
           } else {
             page = await context.newPage();
diff --git a/src/commands/install.ts b/src/commands/install.ts
index 495a672..684a4f8 100644
--- a/src/commands/install.ts
+++ b/src/commands/install.ts
@@ -3,7 +3,7 @@ import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'node:fs';
 import { join } from 'node:path';
 import { homedir } from 'node:os';
 import { loadEnv } from '../config.ts';
-import { CURSOR_RULES_TEMPLATE, CURSOR_RULES_VERSION } from '../cursorrules.ts';
+import { CURSOR_RULES_TEMPLATE, CURSOR_RULES_VERSION, checkCursorRules } from '../cursorrules.ts';
 
 interface InstallOptions extends CommandOptions {
   packageManager?: 'npm' | 'yarn' | 'pnpm';
@@ -186,16 +186,34 @@ export class InstallCommand implements Command {
     yield 'Checking API keys setup...\n';
     yield* this.setupApiKeys();
 
-    // 3. Update/create .cursorrules
+    // 3. Update/create cursor rules
     try {
-      yield 'Checking .cursorrules...\n';
-      const cursorRulesPath = join(absolutePath, '.cursorrules');
+      yield 'Checking cursor rules...\n';
+      const {
+        needsUpdate: shouldUpdate,
+        targetPath,
+        hasLegacyCursorRulesFile,
+      } = checkCursorRules(absolutePath);
 
       let existingContent = '';
-      let needsUpdate = true;
+      let needsUpdate = shouldUpdate;
 
-      if (existsSync(cursorRulesPath)) {
-        existingContent = readFileSync(cursorRulesPath, 'utf-8');
+      if (hasLegacyCursorRulesFile) {
+        yield '\nðŸš§ Warning: Legacy .cursorrules detected. Cursor now recommends using .cursor/rules/*.mdc files. To migrate:\n' +
+          '  1) Move your rules to .cursor/rules/cursor-tools.mdc\n' +
+          '  2) Delete .cursorrules\n\n';
+      }
+
+      // Create directories if needed
+      if (!hasLegacyCursorRulesFile) {
+        const rulesDir = join(absolutePath, '.cursor', 'rules');
+        if (!existsSync(rulesDir)) {
+          mkdirSync(rulesDir, { recursive: true });
+        }
+      }
+
+      if (existsSync(targetPath)) {
+        existingContent = readFileSync(targetPath, 'utf-8');
 
         // Check if cursor-tools section exists and version matches
         const startTag = '<cursor-tools Integration>';
@@ -209,12 +227,12 @@ export class InstallCommand implements Command {
           currentVersion === CURSOR_RULES_VERSION
         ) {
           needsUpdate = false;
-          yield '.cursorrules is up to date.\n';
+          yield 'Cursor rules are up to date.\n';
         } else {
-          yield `Updating .cursorrules from version ${currentVersion} to ${CURSOR_RULES_VERSION}...\n`;
+          yield `Updating cursor rules from version ${currentVersion} to ${CURSOR_RULES_VERSION}...\n`;
         }
       } else {
-        yield 'Creating new .cursorrules file...\n';
+        yield `Creating new cursor rules file at ${targetPath}...\n`;
       }
 
       if (needsUpdate) {
@@ -230,16 +248,16 @@ export class InstallCommand implements Command {
             existingContent.slice(0, startIndex) +
             CURSOR_RULES_TEMPLATE.trim() +
             existingContent.slice(endIndex + endTag.length);
-          writeFileSync(cursorRulesPath, newContent);
+          writeFileSync(targetPath, newContent);
         } else {
           // Append new section
-          writeFileSync(cursorRulesPath, existingContent + CURSOR_RULES_TEMPLATE);
+          writeFileSync(targetPath, existingContent + CURSOR_RULES_TEMPLATE);
         }
       }
 
       yield 'Installation completed successfully!\n';
     } catch (error) {
-      yield `Error updating .cursorrules: ${error instanceof Error ? error.message : 'Unknown error'}\n`;
+      yield `Error updating cursor rules: ${error instanceof Error ? error.message : 'Unknown error'}\n`;
     }
   }
 }
diff --git a/src/cursorrules.ts b/src/cursorrules.ts
index ac026e8..cb4140a 100644
--- a/src/cursorrules.ts
+++ b/src/cursorrules.ts
@@ -87,50 +87,89 @@ when using doc for remote repos suggest writing the output to a file somewhere l
 <!-- cursor-tools-version: ${CURSOR_RULES_VERSION} -->
 </cursor-tools Integration>`;
 
+function isCursorRulesContentUpToDate(content: string) {
+  const startTag = '<cursor-tools Integration>';
+  const endTag = '</cursor-tools Integration>';
+  if (!content.includes(startTag) || !content.includes(endTag)) {
+    return {
+      needsUpdate: true as const,
+      message:
+        'cursor-tools section not found in cursor rules. Run `cursor-tools install .` to update.',
+    };
+  }
+
+  // Check version
+  const versionMatch = content.match(/<!-- cursor-tools-version: ([\w.-]+) -->/);
+  const currentVersion = versionMatch ? versionMatch[1] : '0';
+
+  if (currentVersion !== CURSOR_RULES_VERSION) {
+    return {
+      needsUpdate: true as const,
+      message: `Your cursor rules file is using version ${currentVersion}, but version ${CURSOR_RULES_VERSION} is available. Run \`cursor-tools install .\` to update.`,
+    };
+  }
+
+  return { needsUpdate: false as const };
+}
+
 export function checkCursorRules(workspacePath: string): {
   needsUpdate: boolean;
   message?: string;
+  targetPath: string;
+  hasLegacyCursorRulesFile?: boolean;
 } {
-  const cursorRulesPath = join(workspacePath, '.cursorrules');
+  const legacyPath = join(workspacePath, '.cursorrules');
+  const newPath = join(workspacePath, '.cursor', 'rules', 'cursor-tools.mdc');
+
+  // Check if either file exists
+  const legacyExists = existsSync(legacyPath);
+  const newExists = existsSync(newPath);
 
-  if (!existsSync(cursorRulesPath)) {
+  // If neither exists, prefer new path
+  if (!legacyExists && !newExists) {
     return {
       needsUpdate: true,
       message:
-        'No .cursorrules file found. Run `cursor-tools install .` to set up Cursor integration.',
+        'No cursor rules file found. Run `cursor-tools install .` to set up Cursor integration.',
+      targetPath: newPath,
     };
   }
 
   try {
-    const content = readFileSync(cursorRulesPath, 'utf-8');
-
-    // Check if cursor-tools section exists
-    const startTag = '<cursor-tools Integration>';
-    const endTag = '</cursor-tools Integration>';
-    if (!content.includes(startTag) || !content.includes(endTag)) {
+    // If both exist, check new path first
+    if (newExists && legacyExists) {
+      const newContent = readFileSync(newPath, 'utf-8');
+      const result = isCursorRulesContentUpToDate(newContent);
       return {
-        needsUpdate: true,
-        message:
-          'cursor-tools section not found in .cursorrules. Run `cursor-tools install .` to update.',
+        ...result,
+        targetPath: newPath,
+        hasLegacyCursorRulesFile: true,
       };
     }
 
-    // Check version
-    const versionMatch = content.match(/<!-- cursor-tools-version: ([\w.-]+) -->/);
-    const currentVersion = versionMatch ? versionMatch[1] : '0';
-
-    if (currentVersion !== CURSOR_RULES_VERSION) {
+    // If only new path exists
+    if (newExists) {
+      const newContent = readFileSync(newPath, 'utf-8');
+      const result = isCursorRulesContentUpToDate(newContent);
       return {
-        needsUpdate: true,
-        message: `Your .cursorrules file is using version ${currentVersion}, but version ${CURSOR_RULES_VERSION} is available. Run \`cursor-tools install .\` to update.`,
+        ...result,
+        targetPath: newPath,
       };
     }
 
-    return { needsUpdate: false };
+    // Otherwise only legacy path exists
+    const legacyContent = readFileSync(legacyPath, 'utf-8');
+    const result = isCursorRulesContentUpToDate(legacyContent);
+    return {
+      ...result,
+      targetPath: legacyPath,
+      hasLegacyCursorRulesFile: true,
+    };
   } catch (error) {
     return {
       needsUpdate: true,
-      message: `Error reading .cursorrules: ${error instanceof Error ? error.message : 'Unknown error'}`,
+      message: `Error reading cursor rules: ${error instanceof Error ? error.message : 'Unknown error'}`,
+      targetPath: newPath,
     };
   }
 }
diff --git a/src/repomix/repomixConfig.ts b/src/repomix/repomixConfig.ts
index 0bc89ae..cd5c5dc 100644
--- a/src/repomix/repomixConfig.ts
+++ b/src/repomix/repomixConfig.ts
@@ -16,7 +16,7 @@ export const ignorePatterns = [
   '**/*.tsbuildinfo',
 ];
 
-export const includePatterns = ['**/*', '!.cursorrules'];
+export const includePatterns = ['**/*', '!.cursorrules', '!.cursor/rules/cursor-tools.mdc'];
 
 export const outputOptions = {
   style: 'xml',
